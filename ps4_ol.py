(lambda __g, __y: [(lambda __mod: [(lambda __mod: [[[[[[(fig.suptitle('Figure showing two subplots, with points labeled using LaTeX text.', fontsize='small'), [[(trigax.legend(handles=[sineline, cosline], loc=2, fontsize='x-small'), (trigax.set_xlim([((-pi) * 1.1), (pi * 1.1)]), (trigax.set_ylim([-1.1, 1.1]), (trigax.spines['left'].set_position('center'), (trigax.spines['right'].set_color('none'), (trigax.spines['bottom'].set_position('center'), (trigax.spines['top'].set_color('none'), (trigax.xaxis.set_ticks_position('bottom'), (trigax.yaxis.set_ticks_position('left'), (trigax.set_xticks([(-pi), ((-pi) / 2), 0, (pi / 2), pi]), (trigax.set_xticklabels(['$-\\pi$', '$-\\frac{\\pi}{2}$', '   0', '$+\\frac{\\pi}{2}$', '$+\\pi$']), (trigax.set_yticks([-1, 1]), (trigax.annotate('$\\cos{(\\frac{2\\pi}{3})}=-\\frac{1}{2}$', xy=(((2 * pi) / 3), np.cos(((2 * pi) / 3))), xycoords='data', xytext=(0.8, -0.8), textcoords='data', arrowprops=dict(arrowstyle='->', connectionstyle='arc3, rad=0.3')), [(trigax.axvline(x=((2 * pi) / 3), ymax=0.5, ymin=cosymin, color='b', linestyle='--'), (trigax.plot([((2 * pi) / 3)], [-0.52], 'bo'), (trigax.annotate('$\\sin{(\\frac{2\\pi}{3})}=\\frac{\\sqrt{3}}{2}$', xy=(((2 * pi) / 3), np.sin(((2 * pi) / 3))), xycoords='data', xytext=(2.4, 0.8), textcoords='data', arrowprops=dict(arrowstyle='->', connectionstyle='arc3, rad=0.3')), [(trigax.axvline(x=((2 * pi) / 3), ymin=0.5, ymax=sinemin, color='r', linestyle='--'), (trigax.plot([((2 * pi) / 3)], [(np.sqrt(3) / 2)], 'ro'), [[(expax.plot([0], [1], 'bo'), [[(expax.legend(handles=[expline, negexpline], loc=3, fontsize='x-small'), (expax.set_xlim([((-pi) * 1.1), (pi * 1.1)]), (expax.spines['left'].set_position('center'), (expax.spines['right'].set_color('none'), (expax.spines['top'].set_color('none'), (expax.xaxis.set_ticks_position('bottom'), (expax.yaxis.set_ticks_position('left'), (expax.set_xticks([(-pi), ((-pi) / 2), 0, (pi / 2), pi]), (expax.set_yticks([0, 10, np.exp(pi)]), (expax.set_yticklabels(['0', '10', '$\\exp{(\\pi)}$']), (expax.set_xticklabels(['$-\\pi$', '$-\\frac{\\pi}{2}$', '   0', '$+\\frac{\\pi}{2}$', '$+\\pi$']), (expax.annotate('$\\exp{(0)}=1$', xy=(0, 1), xycoords='data', xytext=(0.3, 4), textcoords='data', arrowprops=dict(arrowstyle='->', connectionstyle='arc3, rad=0.3')), (expax.plot([0], [1], 'bo'), (plt.savefig('bullshit.png'), (lambda __mod: [[[[(mlab.show(), [[[[[(lambda __mod: [[[[(top.imshow(NMR), [(fig.colorbar(image), [[[[[[[[[[[[[(lambda __items, __after, __sentinel: __y(lambda __this: lambda: (lambda __i: [[(x.append(x_center), [(y.append(y_center), __this())[1] for __g['y_center'] in [(((((dy.start + dy.stop) - 1) / 2) - 7))]][0])[1] for __g['x_center'] in [(((((dx.start + dx.stop) - 1) / 2) - 8))]][0] for (__g['dy'], __g['dx']) in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(slices), lambda: (bottom.plot(x, y, 'ro'), (lambda __items, __after, __sentinel: __y(lambda __this: lambda: (lambda __i: [(bottom.annotate('{:.0f}'.format(npR[(y - 5):(y + 5), (x - 5):(x + 5)].mean()), xy=(x, y), xytext=((x + 1), (y + 1)), color='w'), __this())[1] for (__g['x'], __g['y']) in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(zip(x, y)), lambda: (bottom.set_xlim((0, 300)), (bottom.set_ylim((140, 0)), (plt.show(), None)[1])[1])[1], []))[1], []) for (__g['x'], __g['y']) in [(([], []))]][0] for __g['slices'] in [(ndimage.find_objects(labeled))]][0] for (__g['labeled'], __g['num_objects']) in [(ndimage.label(maxima))]][0] for maxima[(diff == 0)] in [(0)]][0] for __g['diff'] in [(((data_max - data_min) > threshold))]][0] for __g['data_min'] in [(filters.minimum_filter(conv, neighborhood_size))]][0] for __g['maxima'] in [((conv == data_max))]][0] for __g['data_max'] in [(filters.maximum_filter(conv, neighborhood_size))]][0] for __g['threshold'] in [(120000)]][0] for __g['neighborhood_size'] in [(15)]][0] for __g['conv'] in [(signal.convolve2d(npR, phantom))]][0] for __g['phantom'] in [(npR[16:34, 17:35])]][0] for __g['npR'] in [(np.array(R.im).reshape(R.size[::-1]))]][0])[1] for __g['image'] in [(bottom.imshow(R))]][0])[1] for (__g['fig'], (__g['top'], __g['bottom'])) in [(plt.subplots(2, 1))]][0] for (__g['R'], __g['G'], __g['B']) in [(NMR.split())]][0] for __g['NMR'] in [(Image.open('NMR_phantom.png'))]][0] for __g['Image'] in [(__mod.Image)]][0])(__import__('PIL', __g, __g, ('Image',), 0)) for __g['filters'] in [(__import__('scipy.ndimage.filters', __g, __g).ndimage.filters)]][0] for __g['ndimage'] in [(__import__('scipy.ndimage', __g, __g).ndimage)]][0] for __g['signal'] in [(__import__('scipy.signal', __g, __g).signal)]][0] for __g['np'] in [(__import__('numpy', __g, __g))]][0] for __g['plt'] in [(__import__('matplotlib.pyplot', __g, __g).pyplot)]][0])[1] for __g['s'] in [(mlab.surf(STM))]][0] for __g['STM'] in [(np.loadtxt('stm.dat'))]][0] for __g['np'] in [(__import__('numpy', __g, __g))]][0] for __g['mlab'] in [(__mod.mlab)]][0])(__import__('mayavi', __g, __g, ('mlab',), 0)))[1])[1])[1])[1])[1])[1])[1])[1])[1])[1])[1])[1])[1])[1] for (__g['negexpline'],) in [(expax.plot(x, negexp, 'c', linewidth=2, label='- exp'))]][0] for (__g['expline'],) in [(expax.plot(x, exp, 'g', linewidth=2, label='exp'))]][0])[1] for __g['negexp'] in [(np.exp((-x)))]][0] for __g['exp'] in [(np.exp(x))]][0])[1])[1] for __g['sinemin'] in [(0.9)]][0])[1])[1])[1] for __g['cosymin'] in [(0.27)]][0])[1])[1])[1])[1])[1])[1])[1])[1])[1])[1])[1])[1])[1] for (__g['cosline'],) in [(trigax.plot(x, cosine, 'b', linewidth=2, label='cosine'))]][0] for (__g['sineline'],) in [(trigax.plot(x, sine, 'r', linewidth=2, label='sine'))]][0])[1] for (__g['fig'], (__g['trigax'], __g['expax'])) in [(plt.subplots(2, 1))]][0] for __g['cosine'] in [(np.cos(x))]][0] for __g['sine'] in [(np.sin(x))]][0] for __g['x'] in [(np.linspace((-np.pi), np.pi, 1000))]][0] for __g['np'] in [(__import__('numpy', __g, __g))]][0] for __g['pi'] in [(__mod.pi)]][0])(__import__('numpy', __g, __g, ('pi',), 0)) for __g['gridspec'] in [(__mod.gridspec)]][0])(__import__('matplotlib', __g, __g, ('gridspec',), 0)) for __g['plt'] in [(__import__('matplotlib.pyplot', __g, __g).pyplot)]][0])(globals(), (lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))))
